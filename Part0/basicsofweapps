// WEB DEVELOPMENT FUNDAMENTALS

// 1. Basics of Web Apps
// - Example app: https://studies.cs.helsinki.fi/exampleapp
// - Demonstrates old techniques (not modern best practices).
// - Modern practices will be covered from Part 1 onwards.

// 2. Developer Console
// - Always keep the Developer Console open while developing.
// - Shortcuts:
//   - macOS: fn-F12 or option-cmd-i
//   - Windows/Linux: Fn-F12 or ctrl-shift-i
// - Key tabs: Console (for debugging) and Network (for monitoring HTTP requests).

// 3. HTTP GET Requests
// - Browser-server communication happens via HTTP protocol.
// - Example: Loading a page triggers:
//   - Fetching HTML content (e.g., /exampleapp)
//   - Downloading resources like images (e.g., kuva.png)
// - Status code 200: Successful request.
// - Headers: Contain metadata (e.g., Content-Type: text/html).

// 4. Traditional Web Apps
// - Server generates HTML dynamically (e.g., using Express.js).
// - Example:
const getFrontPageHtml = (noteCount) => {
  return `
    <!DOCTYPE html>
    <html>
      <body>
        <div class='container'>
          <h1>Full stack example app</h1>
          <p>Number of notes: ${noteCount}</p>
          <a href='/notes'>notes</a>
          <img src='kuva.png' width='200' />
        </div>
      </body>
    </html>
  `;
};
// - Browser is "dumb": Only renders HTML; logic is on the server.

// 5. Running Logic in the Browser
// - Modern apps use JavaScript to manipulate the DOM.
// - Example: Fetching JSON data and rendering it:
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function () {
  if (this.readyState == 4 && this.status == 200) {
    const data = JSON.parse(this.responseText);
    const ul = document.createElement('ul');
    data.forEach(note => {
      const li = document.createElement('li');
      li.appendChild(document.createTextNode(note.content));
      ul.appendChild(li);
    });
    document.getElementById('notes').appendChild(ul);
  }
};
xhttp.open('GET', '/data.json', true);
xhttp.send();

// 6. Event Handlers and Callbacks
// - Event handlers are callback functions triggered by events (e.g., HTTP response).
// - Example:
xhttp.onreadystatechange = function () {
  if (this.readyState == 4 && this.status == 200) {
    // Handle response
  }
};

// 7. DOM (Document Object Model)
// - HTML is represented as a tree structure.
// - DOM API allows programmatic manipulation of HTML elements.
// - Example:
const newElement = document.createElement('li');
newElement.textContent = 'New note';
document.getElementsByTagName('ul')[0].appendChild(newElement);

// 8. CSS (Cascading Style Sheets)
// - Defines the appearance of web pages.
// - Example:
//   .container { padding: 10px; border: 1px solid; }
//   .notes { color: blue; }

// 9. Forms and HTTP POST
// - Submitting a form sends data to the server via HTTP POST.
// - Example:
app.post('/new_note', (req, res) => {
  notes.push({ content: req.body.note, date: new Date() });
  res.redirect('/notes');
});

// 10. AJAX (Asynchronous JavaScript and XML)
// - Fetch data without reloading the page.
// - Example: Fetching JSON data and updating the DOM dynamically.

// 11. Single-Page Applications (SPA)
// - Only one HTML page is loaded; content is updated dynamically using JavaScript.
// - Example:
form.onsubmit = function (e) {
  e.preventDefault();
  const note = { content: e.target.elements[0].value, date: new Date() };
  notes.push(note);
  redrawNotes();
  sendToServer(note);
};

// 12. JavaScript Libraries
// - jQuery: Simplified DOM manipulation (now less relevant).
// - Modern libraries: React (most popular), Angular, Vue.js.

// 13. Full-Stack Web Development
// - Involves frontend (browser), backend (server), and database.
// - JavaScript is used on both frontend and backend (Node.js).

// 14. JavaScript Fatigue
// - Rapid evolution of tools/libraries can be overwhelming.
// - Focus on learning core concepts first, then tools.

// KEY TAKEAWAYS:
// - Understand HTTP requests (GET, POST).
// - Learn DOM manipulation and event handling.
// - Explore SPAs and modern libraries like React.
// - Full-stack development involves frontend, backend, and database.